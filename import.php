<?php
/*
Plugin Name: CDBS Import
Description: Imports CDBS Data
Author: Benjamin Balter
Version: 1.0
Author URI: http://ben.balter.com/
*/

Class CDBS_Import {

	//path to readme (to get table descriptions)
	public $readme = 'http://transition.fcc.gov/ftp/Bureaus/MB/Databases/cdbs/_readme.html';

	//path relative to this script to find data files, with trailing and preceding slash
	public $path_to_data = '/data/'; 
	
	//array of fields to map from facility to post object in from => to format
	public $facility_mapping = array( 'fac_callsign' => 'post_title' );

	/**
	 * Register hooks with WP API
	 */
	function __construct() {
		add_action( 'init', array( &$this, 'init' ), 100 );
		add_filter( 'cdbs_comm_city_value', array( &$this, 'comm_city_filter' ) );
		add_filter( 'cdbs_fac_city_value', array( &$this, 'comm_city_filter' ) );
		add_action( 'admin_menu', array( &$this, 'add_menu_link' ) );
	}

	/**
	 * Given a table name, returns an array of all the column names
	 * @param string $table the table
	 * @return array the coluns
	 */
	function get_columns( $table ) {
	
		if ( $cache = wp_cache_get( $table . '_columns', 'cdbs' ) )
			return $cache;
		
		//grab readme file
		$readme = file_get_contents( $this->readme );
		
		//jump down to this table's description
		$readme = substr( $readme, strpos( $readme, "<pre>$table</pre>" ) );
		
		//jump to the column list
		$readme = substr( $readme, strpos( $readme, '------------------------------' ) + 30 );
		
		//stop at the next table
		$readme = substr( $readme, 0, strpos( $readme, '------------------------------' ) );
		
		//replace HTML spaces generated by word
		$readme = str_replace( '&nbsp;', ' ', $readme );
		
		//strip HTML
		$readme = wp_filter_nohtml_kses( $readme );
		
		//regex for column names
		preg_match_all( '#\([0-9]+\)[ ]+([a-z0-9_]+)[ ]+#', $readme, $matches );
		
		wp_cache_set( $table . '_columns', $matches[1], 'cdbs' );
		
		return $matches[1];
	}
	
	/**
	 * Parses a datafile using the supplied callback
	 * Note: using fopen because some files are too large to load into memory as an array using fgetcsv
	 * @param string $file the table name
	 * @param string|array the callback to use
	 * @return bool success/fail
	 */
	function parse_file( $file, $callback ) {
	
		//build path and load
		$file = dirname( __FILE__ ) . $this->path_to_data . $file . '.dat';
		$handle = fopen( $file, 'r' );
		
		//if no callback is supplied, return the file handle
		if ( !$handle )
			return false;
		
		//loop through file and call callback
		while( !feof( $handle ) )  {
			$row = explode( '|', fgets( $handle ) );
			call_user_func( $callback, $row );
		}
		
		return true;
		
	}
	
	/**
	 * Function to run on WP init
	 */
	function init() {
		
		//look for our get var
		if ( !isset( $_GET['page'] ) || $_GET['page'] != 'cdbs_import' )
			return;
		
		//make sure CDBS is loaded
		if ( !class_exists( 'CDBS' ) )
			wp_die( 'Please activate the CDBS plugin first' );
	
		//don't time out
		set_time_limit( 0 );

		//parse files			
		echo "<PRE>";
		$this->parse_file( 'facility', array( &$this, 'parse_facility' ) );
		die();
		
	}
	
	/**
	 * Callback function to parse facility table
	 * @param array $row the row
	 */
	function parse_facility( $row ) {
		
		//bad data, skip this row
		if ( $row[0] == '' )
			return false;
	
		//init data array
		$data = array();
		
		$cols = $this->get_columns( 'facility' );
		
		//parse numbered array into assoc. array
		foreach ( $row as $id => $value )
			$data[ $cols[$id] ] = $value;
			
		$this->insert_facility( $data );
			
	}
	
	/**
	 * Helper function to insert facility into DB
	 * @param array $data the data array
	 * @return int the ID of the newly inserted post
	 */
	function insert_facility( $data ) {
		global $cdbs;
		
		//establish post array and set post type
		$post = array( 'post_type' => 'facility', 'post_status' => 'publish' );
		
		//map fields
		foreach ( $this->facility_mapping as $from => $to ) {
			$post[ $to ] = $data[ $from ];
			unset( $data[ $from ] );
		}
		
		//insert post, get IT
		$postID = wp_insert_post( $post );
		
		foreach ( $data as $key => $value ) {
		
			if ( empty( $value ) )
				continue;
				
			$value = apply_filters( 'cdbs_' . $key . '_value', $value );
			
			//store either as postmeta or as taxonomy
			if ( in_array( $key, $cdbs->facility_taxs ) ) 
				wp_set_post_terms( $postID, array( $value ), $key, true );
			else 
				update_post_meta( $postID, $key, $value, true );
				
		}
		
		return $postID;

	}
	
	/**
	 * Transforms city from ALLCAPS to Capitalized Words
	 */
	function comm_city_filter( $city ) {
		return ucwords( strtolower( $city ) );
	}
	
	/**
	 * If no facilities are in systems, provides link to run import script
	 */
	function add_menu_link() {
		$posts = get_posts( 'post_type=facility' );
		
		if ( !empty( $posts ) )
			return;
		
		if ( !class_exists( 'CDBS_Import' ) )
			return;
			
		add_submenu_page( 'edit.php?post_type=facility', 'CDBS Import', 'Import', 'manage_options', 'cdbs_import', array( &$this, 'import_redirect' ) ); 
			
	}

}

$CDBS_Import = new CDBS_Import();